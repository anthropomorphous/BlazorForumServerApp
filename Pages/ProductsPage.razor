@page "/productspage"
@using BlazorServerApp.Data
@using BlazorServerAppDB.Data.BlazorServerApp
@inject AuthenticationStateProvider AuthenticationStateProvider

@inherits OwningComponentBase<ThemeTableService>
<h1>Продукты питания</h1>

<AuthorizeView>
    <Authorized>
        @if (themes == null)
        {
            <p><em>Загрузка...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Theme</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var theme in themes)
                    {
                        <tr>
                            <td>@theme.Date.Value.ToShortDateString()</td>
                            <td>@theme.ThemeName</td>
                            <td>
                                <button class="btn btn-primary"
                                        @onclick="(() => EditTheme(theme))">
                                    Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <p>
                <button class="btn btn-primary"
                        @onclick="AddNewTheme">
                    Добавить тему
                </button>
            </p>
            @if (ShowPopup)
            {
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Изменить</h3>
                                <button type="button" class="close"
                                        @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <input class="form-control" type="text"
                                       placeholder="Тема"
                                       @bind="objThemeTable.ThemeName" />
                                <br />
                                <button class="btn btn-primary"
                                        @onclick="SaveTheme">
                                    Сохранить
                                </button>

                                @if (objThemeTable.Id > 0)
                                {
                                    <button class="btn btn-primary"
                                            @onclick="DeleteTheme">
                                        Удалить
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }

        }
    </Authorized>
    <NotAuthorized>
        <p>Вы не вошли в аккаунт.</p>
    </NotAuthorized>
</AuthorizeView>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    List<ThemeTable> themes;

    string category = "Продукты";

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        themes = await @Service.GetThemeByCategoryAsync(category);
    }

    ThemeTable objThemeTable = new ThemeTable();
    bool ShowPopup = false;
    void ClosePopup()
    {
        ShowPopup = false;
    }
    void AddNewTheme()
    {
        objThemeTable = new ThemeTable();
        objThemeTable.Id = 0;
        ShowPopup = true;
    }
    async Task SaveTheme()
    {
        ShowPopup = false;
        var user = (await authenticationStateTask).User;
        if (objThemeTable.Id == 0)
        {
            ThemeTable objNewThemeTable = new ThemeTable();
            objNewThemeTable.Date = System.DateTime.Now;
            objNewThemeTable.ThemeName = objThemeTable.ThemeName;
            objNewThemeTable.UserName = user.Identity.Name;
            objNewThemeTable.CategoryName = category;

            var result =
            @Service.CreateThemeAsync(objNewThemeTable);
        }
        else
        {
            var result =
            @Service.UpdateThemeAsync(objThemeTable);
        }

        themes =
        await @Service.GetThemeByCategoryAsync(category);

    }

    void EditTheme(ThemeTable themeTable)
    {
        objThemeTable = themeTable;
        ShowPopup = true;
    }

    async Task DeleteTheme()
    {
        ShowPopup = false;
        var user = (await authenticationStateTask).User;
        var result = @Service.DeleteThemeAsync(objThemeTable);
        themes =
        await @Service.GetThemeByCategoryAsync(category);
    }
}